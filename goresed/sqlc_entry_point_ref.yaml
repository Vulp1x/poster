entry_point_db: &entry_point_db
  strings:
    - match: |-
        // Code generated by sqlc. DO NOT EDIT.

        package
      replacement: |-
        // Code generated by sqlc. DO NOT EDIT.
        // Code regenerated by goresed. DO NOT EDIT.

        package

    - match: |-
        type DBTX interface {
        	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
        	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
        	QueryRow(context.Context, string, ...interface{}) pgx.Row
        	CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error)
        }

      replacement: |-
        type DBTX interface {
            Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
            Query(context.Context, string, ...interface{}) (pgx.Rows, error)
            QueryRow(context.Context, string, ...interface{}) pgx.Row
        	CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error)
        }
        
        type Tx interface {
            DBTX
            Commit(ctx context.Context) error
            Rollback(ctx context.Context) error
        }
        
        // DBTXFunc for providing connection to database
        type DBTXFunc func(ctx context.Context) DBTX
        
        // TxFunc for providing transactional connection to database
        // On TxFunc call new transaction is started 
        type TxFunc func(ctx context.Context) (Tx, error)

    - match: |-
        func (q *Queries) WithTx(tx pgx.Tx) *Queries {
        	return &Queries{
        		db: tx,
        	}
        }

      replacement: |-
        func (q *Queries) WithTx(tx Tx) {
        	q.db = tx
        }
