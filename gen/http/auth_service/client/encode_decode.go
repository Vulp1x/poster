// Code generated by goa v3.8.5, DO NOT EDIT.
//
// auth_service HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/inst-api/poster/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	authservice "github.com/inst-api/poster/gen/auth_service"
	goahttp "goa.design/goa/v3/http"
)

// BuildSigninRequest instantiates a HTTP request object with method and path
// set to call the "auth_service" service "signin" endpoint
func (c *Client) BuildSigninRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SigninAuthServicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth_service", "signin", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSigninRequest returns an encoder for requests sent to the auth_service
// signin server.
func EncodeSigninRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*authservice.SigninPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth_service", "signin", "*authservice.SigninPayload", v)
		}
		req.SetBasicAuth(p.Login, p.Password)
		return nil
	}
}

// DecodeSigninResponse returns a decoder for responses returned by the
// auth_service signin endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSigninResponse may return the following errors:
//   - "bad request" (type authservice.BadRequest): http.StatusBadRequest
//   - "internal error" (type authservice.InternalError): http.StatusInternalServerError
//   - "unauthorized" (type authservice.Unauthorized): http.StatusUnauthorized
//   - "user not found" (type authservice.UserNotFound): http.StatusNotFound
//   - error: internal error
func DecodeSigninResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SigninResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth_service", "signin", err)
			}
			err = ValidateSigninResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth_service", "signin", err)
			}
			res := NewSigninCredsOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth_service", "signin", err)
			}
			return nil, NewSigninBadRequest(body)
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth_service", "signin", err)
			}
			return nil, NewSigninInternalError(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth_service", "signin", err)
			}
			return nil, NewSigninUnauthorized(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth_service", "signin", err)
			}
			return nil, NewSigninUserNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth_service", "signin", resp.StatusCode, string(body))
		}
	}
}

// BuildProfileRequest instantiates a HTTP request object with method and path
// set to call the "auth_service" service "profile" endpoint
func (c *Client) BuildProfileRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ProfileAuthServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth_service", "profile", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeProfileRequest returns an encoder for requests sent to the
// auth_service profile server.
func EncodeProfileRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*authservice.ProfilePayload)
		if !ok {
			return goahttp.ErrInvalidType("auth_service", "profile", "*authservice.ProfilePayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeProfileResponse returns a decoder for responses returned by the
// auth_service profile endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeProfileResponse may return the following errors:
//   - "bad request" (type authservice.BadRequest): http.StatusBadRequest
//   - "internal error" (type authservice.InternalError): http.StatusInternalServerError
//   - "unauthorized" (type authservice.Unauthorized): http.StatusUnauthorized
//   - "user not found" (type authservice.UserNotFound): http.StatusNotFound
//   - error: internal error
func DecodeProfileResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth_service", "profile", err)
			}
			return nil, NewProfileBadRequest(body)
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth_service", "profile", err)
			}
			return nil, NewProfileInternalError(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth_service", "profile", err)
			}
			return nil, NewProfileUnauthorized(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth_service", "profile", err)
			}
			return nil, NewProfileUserNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth_service", "profile", resp.StatusCode, string(body))
		}
	}
}
