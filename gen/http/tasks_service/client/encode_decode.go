// Code generated by goa v3.8.5, DO NOT EDIT.
//
// tasks_service HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/inst-api/poster/design

package client

import (
	"bytes"
	"context"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"strings"

	tasksservice "github.com/inst-api/poster/gen/tasks_service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateTaskDraftRequest instantiates a HTTP request object with method
// and path set to call the "tasks_service" service "create task draft" endpoint
func (c *Client) BuildCreateTaskDraftRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateTaskDraftTasksServicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks_service", "create task draft", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateTaskDraftRequest returns an encoder for requests sent to the
// tasks_service create task draft server.
func EncodeCreateTaskDraftRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasksservice.CreateTaskDraftPayload)
		if !ok {
			return goahttp.ErrInvalidType("tasks_service", "create task draft", "*tasksservice.CreateTaskDraftPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateTaskDraftRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tasks_service", "create task draft", err)
		}
		return nil
	}
}

// DecodeCreateTaskDraftResponse returns a decoder for responses returned by
// the tasks_service create task draft endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeCreateTaskDraftResponse may return the following errors:
//   - "bad request" (type tasksservice.BadRequest): http.StatusBadRequest
//   - "internal error" (type tasksservice.InternalError): http.StatusInternalServerError
//   - "task not found" (type tasksservice.TaskNotFound): http.StatusNotFound
//   - "unauthorized" (type tasksservice.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateTaskDraftResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "create task draft", err)
			}
			err = goa.MergeErrors(err, goa.ValidateFormat("body", body, goa.FormatUUID))

			if err != nil {
				return nil, goahttp.ErrValidationError("tasks_service", "create task draft", err)
			}
			return body, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "create task draft", err)
			}
			return nil, NewCreateTaskDraftBadRequest(body)
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "create task draft", err)
			}
			return nil, NewCreateTaskDraftInternalError(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "create task draft", err)
			}
			return nil, NewCreateTaskDraftTaskNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "create task draft", err)
			}
			return nil, NewCreateTaskDraftUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks_service", "create task draft", resp.StatusCode, string(body))
		}
	}
}

// BuildUploadFileRequest instantiates a HTTP request object with method and
// path set to call the "tasks_service" service "upload file" endpoint
func (c *Client) BuildUploadFileRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		taskID string
	)
	{
		p, ok := v.(*tasksservice.UploadFilePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("tasks_service", "upload file", "*tasksservice.UploadFilePayload", v)
		}
		taskID = p.TaskID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadFileTasksServicePath(taskID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks_service", "upload file", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadFileRequest returns an encoder for requests sent to the
// tasks_service upload file server.
func EncodeUploadFileRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasksservice.UploadFilePayload)
		if !ok {
			return goahttp.ErrInvalidType("tasks_service", "upload file", "*tasksservice.UploadFilePayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if err := encoder(req).Encode(p); err != nil {
			return goahttp.ErrEncodingError("tasks_service", "upload file", err)
		}
		return nil
	}
}

// NewTasksServiceUploadFileEncoder returns an encoder to encode the multipart
// request for the "tasks_service" service "upload file" endpoint.
func NewTasksServiceUploadFileEncoder(encoderFn TasksServiceUploadFileEncoderFunc) func(r *http.Request) goahttp.Encoder {
	return func(r *http.Request) goahttp.Encoder {
		body := &bytes.Buffer{}
		mw := multipart.NewWriter(body)
		return goahttp.EncodingFunc(func(v interface{}) error {
			p := v.(*tasksservice.UploadFilePayload)
			if err := encoderFn(mw, p); err != nil {
				return err
			}
			r.Body = io.NopCloser(body)
			r.Header.Set("Content-Type", mw.FormDataContentType())
			return mw.Close()
		})
	}
}

// DecodeUploadFileResponse returns a decoder for responses returned by the
// tasks_service upload file endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUploadFileResponse may return the following errors:
//   - "bad request" (type tasksservice.BadRequest): http.StatusBadRequest
//   - "internal error" (type tasksservice.InternalError): http.StatusInternalServerError
//   - "task not found" (type tasksservice.TaskNotFound): http.StatusNotFound
//   - "unauthorized" (type tasksservice.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeUploadFileResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "upload file", err)
			}
			return nil, NewUploadFileBadRequest(body)
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "upload file", err)
			}
			return nil, NewUploadFileInternalError(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "upload file", err)
			}
			return nil, NewUploadFileTaskNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "upload file", err)
			}
			return nil, NewUploadFileUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks_service", "upload file", resp.StatusCode, string(body))
		}
	}
}

// BuildStartTaskRequest instantiates a HTTP request object with method and
// path set to call the "tasks_service" service "start task" endpoint
func (c *Client) BuildStartTaskRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		taskID string
	)
	{
		p, ok := v.(*tasksservice.StartTaskPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("tasks_service", "start task", "*tasksservice.StartTaskPayload", v)
		}
		taskID = p.TaskID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StartTaskTasksServicePath(taskID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks_service", "start task", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStartTaskRequest returns an encoder for requests sent to the
// tasks_service start task server.
func EncodeStartTaskRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasksservice.StartTaskPayload)
		if !ok {
			return goahttp.ErrInvalidType("tasks_service", "start task", "*tasksservice.StartTaskPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeStartTaskResponse returns a decoder for responses returned by the
// tasks_service start task endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeStartTaskResponse may return the following errors:
//   - "bad request" (type tasksservice.BadRequest): http.StatusBadRequest
//   - "internal error" (type tasksservice.InternalError): http.StatusInternalServerError
//   - "task not found" (type tasksservice.TaskNotFound): http.StatusNotFound
//   - "unauthorized" (type tasksservice.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeStartTaskResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "start task", err)
			}
			return nil, NewStartTaskBadRequest(body)
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "start task", err)
			}
			return nil, NewStartTaskInternalError(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "start task", err)
			}
			return nil, NewStartTaskTaskNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "start task", err)
			}
			return nil, NewStartTaskUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks_service", "start task", resp.StatusCode, string(body))
		}
	}
}

// BuildStopTaskRequest instantiates a HTTP request object with method and path
// set to call the "tasks_service" service "stop task" endpoint
func (c *Client) BuildStopTaskRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		taskID string
	)
	{
		p, ok := v.(*tasksservice.StopTaskPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("tasks_service", "stop task", "*tasksservice.StopTaskPayload", v)
		}
		taskID = p.TaskID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StopTaskTasksServicePath(taskID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks_service", "stop task", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStopTaskRequest returns an encoder for requests sent to the
// tasks_service stop task server.
func EncodeStopTaskRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasksservice.StopTaskPayload)
		if !ok {
			return goahttp.ErrInvalidType("tasks_service", "stop task", "*tasksservice.StopTaskPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeStopTaskResponse returns a decoder for responses returned by the
// tasks_service stop task endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeStopTaskResponse may return the following errors:
//   - "bad request" (type tasksservice.BadRequest): http.StatusBadRequest
//   - "internal error" (type tasksservice.InternalError): http.StatusInternalServerError
//   - "task not found" (type tasksservice.TaskNotFound): http.StatusNotFound
//   - "unauthorized" (type tasksservice.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeStopTaskResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "stop task", err)
			}
			return nil, NewStopTaskBadRequest(body)
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "stop task", err)
			}
			return nil, NewStopTaskInternalError(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "stop task", err)
			}
			return nil, NewStopTaskTaskNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "stop task", err)
			}
			return nil, NewStopTaskUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks_service", "stop task", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTaskRequest instantiates a HTTP request object with method and path
// set to call the "tasks_service" service "get task" endpoint
func (c *Client) BuildGetTaskRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		taskID string
	)
	{
		p, ok := v.(*tasksservice.GetTaskPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("tasks_service", "get task", "*tasksservice.GetTaskPayload", v)
		}
		taskID = p.TaskID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTaskTasksServicePath(taskID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks_service", "get task", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetTaskRequest returns an encoder for requests sent to the
// tasks_service get task server.
func EncodeGetTaskRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasksservice.GetTaskPayload)
		if !ok {
			return goahttp.ErrInvalidType("tasks_service", "get task", "*tasksservice.GetTaskPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetTaskResponse returns a decoder for responses returned by the
// tasks_service get task endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetTaskResponse may return the following errors:
//   - "bad request" (type tasksservice.BadRequest): http.StatusBadRequest
//   - "internal error" (type tasksservice.InternalError): http.StatusInternalServerError
//   - "task not found" (type tasksservice.TaskNotFound): http.StatusNotFound
//   - "unauthorized" (type tasksservice.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetTaskResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "get task", err)
			}
			return nil, NewGetTaskBadRequest(body)
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "get task", err)
			}
			return nil, NewGetTaskInternalError(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "get task", err)
			}
			return nil, NewGetTaskTaskNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "get task", err)
			}
			return nil, NewGetTaskUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks_service", "get task", resp.StatusCode, string(body))
		}
	}
}

// BuildListTasksRequest instantiates a HTTP request object with method and
// path set to call the "tasks_service" service "list tasks" endpoint
func (c *Client) BuildListTasksRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListTasksTasksServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks_service", "list tasks", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListTasksRequest returns an encoder for requests sent to the
// tasks_service list tasks server.
func EncodeListTasksRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasksservice.ListTasksPayload)
		if !ok {
			return goahttp.ErrInvalidType("tasks_service", "list tasks", "*tasksservice.ListTasksPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeListTasksResponse returns a decoder for responses returned by the
// tasks_service list tasks endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListTasksResponse may return the following errors:
//   - "bad request" (type tasksservice.BadRequest): http.StatusBadRequest
//   - "internal error" (type tasksservice.InternalError): http.StatusInternalServerError
//   - "task not found" (type tasksservice.TaskNotFound): http.StatusNotFound
//   - "unauthorized" (type tasksservice.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeListTasksResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "list tasks", err)
			}
			return nil, NewListTasksBadRequest(body)
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "list tasks", err)
			}
			return nil, NewListTasksInternalError(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "list tasks", err)
			}
			return nil, NewListTasksTaskNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks_service", "list tasks", err)
			}
			return nil, NewListTasksUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks_service", "list tasks", resp.StatusCode, string(body))
		}
	}
}
