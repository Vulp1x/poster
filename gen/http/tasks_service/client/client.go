// Code generated by goa v3.8.5, DO NOT EDIT.
//
// tasks_service client HTTP transport
//
// Command:
// $ goa gen github.com/inst-api/poster/design

package client

import (
	"context"
	"mime/multipart"
	"net/http"

	tasksservice "github.com/inst-api/poster/gen/tasks_service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the tasks_service service endpoint HTTP clients.
type Client struct {
	// CreateTask Doer is the HTTP client used to make requests to the create task
	// endpoint.
	CreateTaskDoer goahttp.Doer

	// UploadFile Doer is the HTTP client used to make requests to the upload file
	// endpoint.
	UploadFileDoer goahttp.Doer

	// StartTask Doer is the HTTP client used to make requests to the start task
	// endpoint.
	StartTaskDoer goahttp.Doer

	// GetTask Doer is the HTTP client used to make requests to the get task
	// endpoint.
	GetTaskDoer goahttp.Doer

	// ListTasks Doer is the HTTP client used to make requests to the list tasks
	// endpoint.
	ListTasksDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// TasksServiceUploadFileEncoderFunc is the type to encode multipart request
// for the "tasks_service" service "upload file" endpoint.
type TasksServiceUploadFileEncoderFunc func(*multipart.Writer, *tasksservice.UploadFilePayload) error

// NewClient instantiates HTTP clients for all the tasks_service service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateTaskDoer:      doer,
		UploadFileDoer:      doer,
		StartTaskDoer:       doer,
		GetTaskDoer:         doer,
		ListTasksDoer:       doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreateTask returns an endpoint that makes HTTP requests to the tasks_service
// service create task server.
func (c *Client) CreateTask() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateTaskRequest(c.encoder)
		decodeResponse = DecodeCreateTaskResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateTaskRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateTaskDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tasks_service", "create task", err)
		}
		return decodeResponse(resp)
	}
}

// UploadFile returns an endpoint that makes HTTP requests to the tasks_service
// service upload file server.
func (c *Client) UploadFile(tasksServiceUploadFileEncoderFn TasksServiceUploadFileEncoderFunc) goa.Endpoint {
	var (
		encodeRequest  = EncodeUploadFileRequest(NewTasksServiceUploadFileEncoder(tasksServiceUploadFileEncoderFn))
		decodeResponse = DecodeUploadFileResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUploadFileRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UploadFileDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tasks_service", "upload file", err)
		}
		return decodeResponse(resp)
	}
}

// StartTask returns an endpoint that makes HTTP requests to the tasks_service
// service start task server.
func (c *Client) StartTask() goa.Endpoint {
	var (
		encodeRequest  = EncodeStartTaskRequest(c.encoder)
		decodeResponse = DecodeStartTaskResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildStartTaskRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StartTaskDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tasks_service", "start task", err)
		}
		return decodeResponse(resp)
	}
}

// GetTask returns an endpoint that makes HTTP requests to the tasks_service
// service get task server.
func (c *Client) GetTask() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTaskRequest(c.encoder)
		decodeResponse = DecodeGetTaskResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetTaskRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTaskDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tasks_service", "get task", err)
		}
		return decodeResponse(resp)
	}
}

// ListTasks returns an endpoint that makes HTTP requests to the tasks_service
// service list tasks server.
func (c *Client) ListTasks() goa.Endpoint {
	var (
		encodeRequest  = EncodeListTasksRequest(c.encoder)
		decodeResponse = DecodeListTasksResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListTasksRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListTasksDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tasks_service", "list tasks", err)
		}
		return decodeResponse(resp)
	}
}
