// Code generated by goa v3.8.5, DO NOT EDIT.
//
// tasks_service HTTP server types
//
// Command:
// $ goa gen github.com/inst-api/poster/design

package server

import (
	tasksservice "github.com/inst-api/poster/gen/tasks_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateTaskDraftRequestBody is the type of the "tasks_service" service
// "create task draft" endpoint HTTP request body.
type CreateTaskDraftRequestBody struct {
	// название задачи
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// шаблон для подписи под постом
	TextTemplate *string `json:"text_template"`
	// фотография для постов
	PostImage *string `json:"post_image"`
}

// UploadFileRequestBody is the type of the "tasks_service" service "upload
// file" endpoint HTTP request body.
type UploadFileRequestBody struct {
	// 1 - список ботов
	// 2 - список резидентских прокси
	// 3 - спиок прокси-шестёрок
	FileType *int `form:"file_type,omitempty" json:"file_type,omitempty" xml:"file_type,omitempty"`
	// содержимое файла
	ProxyBytes []byte `json:"proxy_bytes"`
	// список ботов
	BotsBytes []byte `json:"bots_bytes"`
	// изображение для поста
	ImageBytes []byte `json:"proxy_bytes"`
}

// NewCreateTaskDraftPayload builds a tasks_service service create task draft
// endpoint payload.
func NewCreateTaskDraftPayload(body *CreateTaskDraftRequestBody, token string) *tasksservice.CreateTaskDraftPayload {
	v := &tasksservice.CreateTaskDraftPayload{
		Title:        *body.Title,
		TextTemplate: *body.TextTemplate,
		PostImage:    *body.PostImage,
	}
	v.Token = token

	return v
}

// NewUploadFilePayload builds a tasks_service service upload file endpoint
// payload.
func NewUploadFilePayload(body *UploadFileRequestBody, taskID string, token string) *tasksservice.UploadFilePayload {
	v := &tasksservice.UploadFilePayload{
		FileType:   *body.FileType,
		ProxyBytes: body.ProxyBytes,
		BotsBytes:  body.BotsBytes,
		ImageBytes: body.ImageBytes,
	}
	v.TaskID = taskID
	v.Token = token

	return v
}

// NewStartTaskPayload builds a tasks_service service start task endpoint
// payload.
func NewStartTaskPayload(taskID string, token string) *tasksservice.StartTaskPayload {
	v := &tasksservice.StartTaskPayload{}
	v.TaskID = taskID
	v.Token = token

	return v
}

// NewStopTaskPayload builds a tasks_service service stop task endpoint payload.
func NewStopTaskPayload(taskID string, token string) *tasksservice.StopTaskPayload {
	v := &tasksservice.StopTaskPayload{}
	v.TaskID = taskID
	v.Token = token

	return v
}

// NewGetTaskPayload builds a tasks_service service get task endpoint payload.
func NewGetTaskPayload(taskID string, token string) *tasksservice.GetTaskPayload {
	v := &tasksservice.GetTaskPayload{}
	v.TaskID = taskID
	v.Token = token

	return v
}

// NewListTasksPayload builds a tasks_service service list tasks endpoint
// payload.
func NewListTasksPayload(token string) *tasksservice.ListTasksPayload {
	v := &tasksservice.ListTasksPayload{}
	v.Token = token

	return v
}

// ValidateCreateTaskDraftRequestBody runs the validations defined on Create
// Task DraftRequestBody
func ValidateCreateTaskDraftRequestBody(body *CreateTaskDraftRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.TextTemplate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("text_template", "body"))
	}
	if body.PostImage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("post_image", "body"))
	}
	return
}

// ValidateUploadFileRequestBody runs the validations defined on Upload
// FileRequestBody
func ValidateUploadFileRequestBody(body *UploadFileRequestBody) (err error) {
	if body.FileType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file_type", "body"))
	}
	if body.FileType != nil {
		if !(*body.FileType == 1 || *body.FileType == 2 || *body.FileType == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.file_type", *body.FileType, []interface{}{1, 2, 3}))
		}
	}
	return
}
