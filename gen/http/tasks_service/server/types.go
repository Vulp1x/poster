// Code generated by goa v3.8.5, DO NOT EDIT.
//
// tasks_service HTTP server types
//
// Command:
// $ goa gen github.com/inst-api/poster/design

package server

import (
	tasksservice "github.com/inst-api/poster/gen/tasks_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateTaskRequestBody is the type of the "tasks_service" service "create
// task" endpoint HTTP request body.
type CreateTaskRequestBody struct {
	// название задачи
	Tittle *string `form:"tittle,omitempty" json:"tittle,omitempty" xml:"tittle,omitempty"`
	// описание задачи
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UploadFileRequestBody is the type of the "tasks_service" service "upload
// file" endpoint HTTP request body.
type UploadFileRequestBody struct {
	// 1 - список ботов
	// 2 - список резидентских прокси
	// 3 - спиок прокси-шестёрок
	FileType *int `form:"file_type,omitempty" json:"file_type,omitempty" xml:"file_type,omitempty"`
	// содержимое файла
	Bytes []byte `form:"bytes,omitempty" json:"bytes,omitempty" xml:"bytes,omitempty"`
}

// NewCreateTaskPayload builds a tasks_service service create task endpoint
// payload.
func NewCreateTaskPayload(body *CreateTaskRequestBody, token string) *tasksservice.CreateTaskPayload {
	v := &tasksservice.CreateTaskPayload{
		Tittle:      body.Tittle,
		Description: body.Description,
	}
	v.Token = token

	return v
}

// NewUploadFilePayload builds a tasks_service service upload file endpoint
// payload.
func NewUploadFilePayload(body *UploadFileRequestBody, taskID string, token string) *tasksservice.UploadFilePayload {
	v := &tasksservice.UploadFilePayload{
		FileType: *body.FileType,
		Bytes:    body.Bytes,
	}
	v.TaskID = taskID
	v.Token = token

	return v
}

// NewStartTaskPayload builds a tasks_service service start task endpoint
// payload.
func NewStartTaskPayload(taskID string, token string) *tasksservice.StartTaskPayload {
	v := &tasksservice.StartTaskPayload{}
	v.TaskID = taskID
	v.Token = token

	return v
}

// NewGetTaskPayload builds a tasks_service service get task endpoint payload.
func NewGetTaskPayload(taskID string, token string) *tasksservice.GetTaskPayload {
	v := &tasksservice.GetTaskPayload{}
	v.TaskID = taskID
	v.Token = token

	return v
}

// NewListTasksPayload builds a tasks_service service list tasks endpoint
// payload.
func NewListTasksPayload(token string) *tasksservice.ListTasksPayload {
	v := &tasksservice.ListTasksPayload{}
	v.Token = token

	return v
}

// ValidateUploadFileRequestBody runs the validations defined on Upload
// FileRequestBody
func ValidateUploadFileRequestBody(body *UploadFileRequestBody) (err error) {
	if body.FileType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file_type", "body"))
	}
	if body.FileType != nil {
		if !(*body.FileType == 1 || *body.FileType == 2 || *body.FileType == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.file_type", *body.FileType, []interface{}{1, 2, 3}))
		}
	}
	return
}
