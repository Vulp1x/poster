// Code generated by goa v3.8.5, DO NOT EDIT.
//
// admin_service HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/inst-api/poster/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	adminservice "github.com/inst-api/poster/gen/admin_service"
	goahttp "goa.design/goa/v3/http"
)

// BuildAddManagerRequest instantiates a HTTP request object with method and
// path set to call the "admin_service" service "add_manager" endpoint
func (c *Client) BuildAddManagerRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddManagerAdminServicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("admin_service", "add_manager", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddManagerRequest returns an encoder for requests sent to the
// admin_service add_manager server.
func EncodeAddManagerRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*adminservice.AddManagerPayload)
		if !ok {
			return goahttp.ErrInvalidType("admin_service", "add_manager", "*adminservice.AddManagerPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewAddManagerRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("admin_service", "add_manager", err)
		}
		return nil
	}
}

// DecodeAddManagerResponse returns a decoder for responses returned by the
// admin_service add_manager endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeAddManagerResponse may return the following errors:
//   - "bad request" (type adminservice.BadRequest): http.StatusBadRequest
//   - "invalid-scopes" (type adminservice.InvalidScopes): http.StatusForbidden
//   - "unauthorized" (type adminservice.Unauthorized): http.StatusUnauthorized
//   - "user not found" (type adminservice.UserNotFound): http.StatusNotFound
//   - error: internal error
func DecodeAddManagerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin_service", "add_manager", err)
			}
			return nil, NewAddManagerBadRequest(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin_service", "add_manager", err)
			}
			return nil, NewAddManagerInvalidScopes(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin_service", "add_manager", err)
			}
			return nil, NewAddManagerUnauthorized(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin_service", "add_manager", err)
			}
			return nil, NewAddManagerUserNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("admin_service", "add_manager", resp.StatusCode, string(body))
		}
	}
}

// BuildDropManagerRequest instantiates a HTTP request object with method and
// path set to call the "admin_service" service "drop_manager" endpoint
func (c *Client) BuildDropManagerRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		managerID string
	)
	{
		p, ok := v.(*adminservice.DropManagerPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("admin_service", "drop_manager", "*adminservice.DropManagerPayload", v)
		}
		managerID = p.ManagerID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DropManagerAdminServicePath(managerID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("admin_service", "drop_manager", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDropManagerRequest returns an encoder for requests sent to the
// admin_service drop_manager server.
func EncodeDropManagerRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*adminservice.DropManagerPayload)
		if !ok {
			return goahttp.ErrInvalidType("admin_service", "drop_manager", "*adminservice.DropManagerPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDropManagerResponse returns a decoder for responses returned by the
// admin_service drop_manager endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDropManagerResponse may return the following errors:
//   - "bad request" (type adminservice.BadRequest): http.StatusBadRequest
//   - "invalid-scopes" (type adminservice.InvalidScopes): http.StatusForbidden
//   - "unauthorized" (type adminservice.Unauthorized): http.StatusUnauthorized
//   - "user not found" (type adminservice.UserNotFound): http.StatusNotFound
//   - error: internal error
func DecodeDropManagerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin_service", "drop_manager", err)
			}
			return nil, NewDropManagerBadRequest(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin_service", "drop_manager", err)
			}
			return nil, NewDropManagerInvalidScopes(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin_service", "drop_manager", err)
			}
			return nil, NewDropManagerUnauthorized(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin_service", "drop_manager", err)
			}
			return nil, NewDropManagerUserNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("admin_service", "drop_manager", resp.StatusCode, string(body))
		}
	}
}
