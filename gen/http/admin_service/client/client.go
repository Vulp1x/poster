// Code generated by goa v3.8.5, DO NOT EDIT.
//
// admin_service client HTTP transport
//
// Command:
// $ goa gen github.com/inst-api/poster/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the admin_service service endpoint HTTP clients.
type Client struct {
	// AddManager Doer is the HTTP client used to make requests to the add_manager
	// endpoint.
	AddManagerDoer goahttp.Doer

	// DropManager Doer is the HTTP client used to make requests to the
	// drop_manager endpoint.
	DropManagerDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the admin_service service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AddManagerDoer:      doer,
		DropManagerDoer:     doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// AddManager returns an endpoint that makes HTTP requests to the admin_service
// service add_manager server.
func (c *Client) AddManager() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddManagerRequest(c.encoder)
		decodeResponse = DecodeAddManagerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddManagerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddManagerDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("admin_service", "add_manager", err)
		}
		return decodeResponse(resp)
	}
}

// DropManager returns an endpoint that makes HTTP requests to the
// admin_service service drop_manager server.
func (c *Client) DropManager() goa.Endpoint {
	var (
		encodeRequest  = EncodeDropManagerRequest(c.encoder)
		decodeResponse = DecodeDropManagerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDropManagerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DropManagerDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("admin_service", "drop_manager", err)
		}
		return decodeResponse(resp)
	}
}
