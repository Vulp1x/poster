// Code generated by goa v3.8.5, DO NOT EDIT.
//
// admin_service endpoints
//
// Command:
// $ goa gen github.com/inst-api/poster/design

package adminservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "admin_service" service endpoints.
type Endpoints struct {
	AddManager  goa.Endpoint
	DropManager goa.Endpoint
}

// NewEndpoints wraps the methods of the "admin_service" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		AddManager:  NewAddManagerEndpoint(s, a.JWTAuth),
		DropManager: NewDropManagerEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "admin_service" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.AddManager = m(e.AddManager)
	e.DropManager = m(e.DropManager)
}

// NewAddManagerEndpoint returns an endpoint function that calls the method
// "add_manager" of service "admin_service".
func NewAddManagerEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AddManagerPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"driver", "admin"},
			RequiredScopes: []string{"admin"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.AddManager(ctx, p)
	}
}

// NewDropManagerEndpoint returns an endpoint function that calls the method
// "drop_manager" of service "admin_service".
func NewDropManagerEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DropManagerPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"driver", "admin"},
			RequiredScopes: []string{"admin"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DropManager(ctx, p)
	}
}
