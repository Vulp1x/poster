// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: copyfrom.go

package dbmodel

import (
	"context"
)

// iteratorForSaveBotAccounts implements pgx.CopyFromSource.
type iteratorForSaveBotAccounts struct {
	rows                 []SaveBotAccountsParams
	skippedFirstNextCall bool
}

func (r *iteratorForSaveBotAccounts) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSaveBotAccounts) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TaskID,
		r.rows[0].Username,
		r.rows[0].Password,
		r.rows[0].UserAgent,
		r.rows[0].DeviceData,
		r.rows[0].Session,
		r.rows[0].Headers,
		r.rows[0].Status,
		r.rows[0].FileOrder,
		r.rows[0].InstID,
	}, nil
}

func (r iteratorForSaveBotAccounts) Err() error {
	return nil
}

func (q *Queries) SaveBotAccounts(ctx context.Context, arg []SaveBotAccountsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"bot_accounts"}, []string{"task_id", "username", "password", "user_agent", "device_data", "session", "headers", "status", "file_order", "inst_id"}, &iteratorForSaveBotAccounts{rows: arg})
}

// iteratorForSaveProxies implements pgx.CopyFromSource.
type iteratorForSaveProxies struct {
	rows                 []SaveProxiesParams
	skippedFirstNextCall bool
}

func (r *iteratorForSaveProxies) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSaveProxies) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TaskID,
		r.rows[0].Host,
		r.rows[0].Port,
		r.rows[0].Login,
		r.rows[0].Pass,
		r.rows[0].Type,
	}, nil
}

func (r iteratorForSaveProxies) Err() error {
	return nil
}

func (q *Queries) SaveProxies(ctx context.Context, arg []SaveProxiesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"proxies"}, []string{"task_id", "host", "port", "login", "pass", "type"}, &iteratorForSaveProxies{rows: arg})
}

// iteratorForSaveTargetUsers implements pgx.CopyFromSource.
type iteratorForSaveTargetUsers struct {
	rows                 []SaveTargetUsersParams
	skippedFirstNextCall bool
}

func (r *iteratorForSaveTargetUsers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSaveTargetUsers) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TaskID,
		r.rows[0].Username,
		r.rows[0].UserID,
	}, nil
}

func (r iteratorForSaveTargetUsers) Err() error {
	return nil
}

func (q *Queries) SaveTargetUsers(ctx context.Context, arg []SaveTargetUsersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"target_users"}, []string{"task_id", "username", "user_id"}, &iteratorForSaveTargetUsers{rows: arg})
}
