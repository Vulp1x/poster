// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package instaproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstaProxyClient is the client API for InstaProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstaProxyClient interface {
	// сохраняем ботов
	SaveBots(ctx context.Context, in *SaveBotsRequest, opts ...grpc.CallOption) (*SaveBotsResponse, error)
	FindSimilarBloggers(ctx context.Context, in *SimilarBloggersRequest, opts ...grpc.CallOption) (*SimilarBloggersResponse, error)
	ParseMedia(ctx context.Context, in *ParseMediaRequest, opts ...grpc.CallOption) (*ParseMediaResponse, error)
}

type instaProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewInstaProxyClient(cc grpc.ClientConnInterface) InstaProxyClient {
	return &instaProxyClient{cc}
}

func (c *instaProxyClient) SaveBots(ctx context.Context, in *SaveBotsRequest, opts ...grpc.CallOption) (*SaveBotsResponse, error) {
	out := new(SaveBotsResponse)
	err := c.cc.Invoke(ctx, "/InstaProxy/SaveBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instaProxyClient) FindSimilarBloggers(ctx context.Context, in *SimilarBloggersRequest, opts ...grpc.CallOption) (*SimilarBloggersResponse, error) {
	out := new(SimilarBloggersResponse)
	err := c.cc.Invoke(ctx, "/InstaProxy/FindSimilarBloggers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instaProxyClient) ParseMedia(ctx context.Context, in *ParseMediaRequest, opts ...grpc.CallOption) (*ParseMediaResponse, error) {
	out := new(ParseMediaResponse)
	err := c.cc.Invoke(ctx, "/InstaProxy/ParseMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstaProxyServer is the server API for InstaProxy service.
// All implementations must embed UnimplementedInstaProxyServer
// for forward compatibility
type InstaProxyServer interface {
	// сохраняем ботов
	SaveBots(context.Context, *SaveBotsRequest) (*SaveBotsResponse, error)
	FindSimilarBloggers(context.Context, *SimilarBloggersRequest) (*SimilarBloggersResponse, error)
	ParseMedia(context.Context, *ParseMediaRequest) (*ParseMediaResponse, error)
	mustEmbedUnimplementedInstaProxyServer()
}

// UnimplementedInstaProxyServer must be embedded to have forward compatible implementations.
type UnimplementedInstaProxyServer struct {
}

func (UnimplementedInstaProxyServer) SaveBots(context.Context, *SaveBotsRequest) (*SaveBotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBots not implemented")
}
func (UnimplementedInstaProxyServer) FindSimilarBloggers(context.Context, *SimilarBloggersRequest) (*SimilarBloggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSimilarBloggers not implemented")
}
func (UnimplementedInstaProxyServer) ParseMedia(context.Context, *ParseMediaRequest) (*ParseMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseMedia not implemented")
}
func (UnimplementedInstaProxyServer) mustEmbedUnimplementedInstaProxyServer() {}

// UnsafeInstaProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstaProxyServer will
// result in compilation errors.
type UnsafeInstaProxyServer interface {
	mustEmbedUnimplementedInstaProxyServer()
}

func RegisterInstaProxyServer(s grpc.ServiceRegistrar, srv InstaProxyServer) {
	s.RegisterService(&InstaProxy_ServiceDesc, srv)
}

func _InstaProxy_SaveBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstaProxyServer).SaveBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InstaProxy/SaveBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstaProxyServer).SaveBots(ctx, req.(*SaveBotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstaProxy_FindSimilarBloggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimilarBloggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstaProxyServer).FindSimilarBloggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InstaProxy/FindSimilarBloggers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstaProxyServer).FindSimilarBloggers(ctx, req.(*SimilarBloggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstaProxy_ParseMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstaProxyServer).ParseMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InstaProxy/ParseMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstaProxyServer).ParseMedia(ctx, req.(*ParseMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstaProxy_ServiceDesc is the grpc.ServiceDesc for InstaProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstaProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InstaProxy",
	HandlerType: (*InstaProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveBots",
			Handler:    _InstaProxy_SaveBots_Handler,
		},
		{
			MethodName: "FindSimilarBloggers",
			Handler:    _InstaProxy_FindSimilarBloggers_Handler,
		},
		{
			MethodName: "ParseMedia",
			Handler:    _InstaProxy_ParseMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "instaproxy/instaproxy.proto",
}
