// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: instaproxy/instaproxy.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpenProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotId int64 `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
}

func (x *OpenProfileRequest) Reset() {
	*x = OpenProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenProfileRequest) ProtoMessage() {}

func (x *OpenProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenProfileRequest.ProtoReflect.Descriptor instead.
func (*OpenProfileRequest) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{0}
}

func (x *OpenProfileRequest) GetBotId() int64 {
	if x != nil {
		return x.BotId
	}
	return 0
}

type OpenProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Medias []*Media        `protobuf:"bytes,1,rep,name=medias,proto3" json:"medias,omitempty"`
	User   *UserSuperShort `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *OpenProfileResponse) Reset() {
	*x = OpenProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenProfileResponse) ProtoMessage() {}

func (x *OpenProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenProfileResponse.ProtoReflect.Descriptor instead.
func (*OpenProfileResponse) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{1}
}

func (x *OpenProfileResponse) GetMedias() []*Media {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *OpenProfileResponse) GetUser() *UserSuperShort {
	if x != nil {
		return x.User
	}
	return nil
}

type FollowUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usernames []string `protobuf:"bytes,1,rep,name=usernames,proto3" json:"usernames,omitempty"`
	BotId     int64    `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
}

func (x *FollowUsersRequest) Reset() {
	*x = FollowUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowUsersRequest) ProtoMessage() {}

func (x *FollowUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowUsersRequest.ProtoReflect.Descriptor instead.
func (*FollowUsersRequest) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{2}
}

func (x *FollowUsersRequest) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

func (x *FollowUsersRequest) GetBotId() int64 {
	if x != nil {
		return x.BotId
	}
	return 0
}

type FollowUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SucceededCount int32 `protobuf:"varint,1,opt,name=succeeded_count,json=succeededCount,proto3" json:"succeeded_count,omitempty"`
}

func (x *FollowUsersResponse) Reset() {
	*x = FollowUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowUsersResponse) ProtoMessage() {}

func (x *FollowUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowUsersResponse.ProtoReflect.Descriptor instead.
func (*FollowUsersResponse) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{3}
}

func (x *FollowUsersResponse) GetSucceededCount() int32 {
	if x != nil {
		return x.SucceededCount
	}
	return 0
}

type PostPictureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Photo []byte `protobuf:"bytes,1,opt,name=photo,proto3" json:"photo,omitempty"`
	// идентификатор бота
	UserId                  int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Caption                 string  `protobuf:"bytes,3,opt,name=caption,proto3" json:"caption,omitempty"`
	UserTags                []int64 `protobuf:"varint,4,rep,packed,name=user_tags,json=userTags,proto3" json:"user_tags,omitempty"`
	CheapProxy              *Proxy  `protobuf:"bytes,5,opt,name=cheap_proxy,json=cheapProxy,proto3,oneof" json:"cheap_proxy,omitempty"`
	UpdatePhotoDelaySeconds int32   `protobuf:"varint,6,opt,name=update_photo_delay_seconds,json=updatePhotoDelaySeconds,proto3" json:"update_photo_delay_seconds,omitempty"`
}

func (x *PostPictureRequest) Reset() {
	*x = PostPictureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPictureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPictureRequest) ProtoMessage() {}

func (x *PostPictureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPictureRequest.ProtoReflect.Descriptor instead.
func (*PostPictureRequest) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{4}
}

func (x *PostPictureRequest) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *PostPictureRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PostPictureRequest) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *PostPictureRequest) GetUserTags() []int64 {
	if x != nil {
		return x.UserTags
	}
	return nil
}

func (x *PostPictureRequest) GetCheapProxy() *Proxy {
	if x != nil {
		return x.CheapProxy
	}
	return nil
}

func (x *PostPictureRequest) GetUpdatePhotoDelaySeconds() int32 {
	if x != nil {
		return x.UpdatePhotoDelaySeconds
	}
	return 0
}

type PostPictureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "id": "3026763766533203939_57291273439",
	MediaId string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	// "pk": "3026763766533203939",
	MediaPk int64 `protobuf:"varint,2,opt,name=media_pk,json=mediaPk,proto3" json:"media_pk,omitempty"`
}

func (x *PostPictureResponse) Reset() {
	*x = PostPictureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPictureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPictureResponse) ProtoMessage() {}

func (x *PostPictureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPictureResponse.ProtoReflect.Descriptor instead.
func (*PostPictureResponse) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{5}
}

func (x *PostPictureResponse) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *PostPictureResponse) GetMediaPk() int64 {
	if x != nil {
		return x.MediaPk
	}
	return 0
}

type UpdatePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// идентификатор бота
	UserId       int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Caption      string  `protobuf:"bytes,2,opt,name=caption,proto3" json:"caption,omitempty"`
	UserTags     []int64 `protobuf:"varint,3,rep,packed,name=user_tags,json=userTags,proto3" json:"user_tags,omitempty"`
	MediaId      string  `protobuf:"bytes,4,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	FeedPosition int32   `protobuf:"varint,5,opt,name=feed_position,json=feedPosition,proto3" json:"feed_position,omitempty"`
}

func (x *UpdatePostRequest) Reset() {
	*x = UpdatePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePostRequest) ProtoMessage() {}

func (x *UpdatePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePostRequest.ProtoReflect.Descriptor instead.
func (*UpdatePostRequest) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePostRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdatePostRequest) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *UpdatePostRequest) GetUserTags() []int64 {
	if x != nil {
		return x.UserTags
	}
	return nil
}

func (x *UpdatePostRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *UpdatePostRequest) GetFeedPosition() int32 {
	if x != nil {
		return x.FeedPosition
	}
	return 0
}

type UpdatePostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePostResponse) Reset() {
	*x = UpdatePostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePostResponse) ProtoMessage() {}

func (x *UpdatePostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePostResponse.ProtoReflect.Descriptor instead.
func (*UpdatePostResponse) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{7}
}

type GetBloggerMediasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	MediasCount int32  `protobuf:"varint,2,opt,name=medias_count,json=mediasCount,proto3" json:"medias_count,omitempty"`
}

func (x *GetBloggerMediasRequest) Reset() {
	*x = GetBloggerMediasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBloggerMediasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBloggerMediasRequest) ProtoMessage() {}

func (x *GetBloggerMediasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBloggerMediasRequest.ProtoReflect.Descriptor instead.
func (*GetBloggerMediasRequest) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{8}
}

func (x *GetBloggerMediasRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetBloggerMediasRequest) GetMediasCount() int32 {
	if x != nil {
		return x.MediasCount
	}
	return 0
}

type GetBloggerMediasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Medias []*Media `protobuf:"bytes,1,rep,name=medias,proto3" json:"medias,omitempty"`
}

func (x *GetBloggerMediasResponse) Reset() {
	*x = GetBloggerMediasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBloggerMediasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBloggerMediasResponse) ProtoMessage() {}

func (x *GetBloggerMediasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBloggerMediasResponse.ProtoReflect.Descriptor instead.
func (*GetBloggerMediasResponse) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{9}
}

func (x *GetBloggerMediasResponse) GetMedias() []*Media {
	if x != nil {
		return x.Medias
	}
	return nil
}

type ParseMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId       string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	CommentsCount int32  `protobuf:"varint,2,opt,name=comments_count,json=commentsCount,proto3" json:"comments_count,omitempty"`
	LikesCount    int32  `protobuf:"varint,3,opt,name=likes_count,json=likesCount,proto3" json:"likes_count,omitempty"`
}

func (x *ParseMediaRequest) Reset() {
	*x = ParseMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseMediaRequest) ProtoMessage() {}

func (x *ParseMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseMediaRequest.ProtoReflect.Descriptor instead.
func (*ParseMediaRequest) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{10}
}

func (x *ParseMediaRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *ParseMediaRequest) GetCommentsCount() int32 {
	if x != nil {
		return x.CommentsCount
	}
	return 0
}

func (x *ParseMediaRequest) GetLikesCount() int32 {
	if x != nil {
		return x.LikesCount
	}
	return 0
}

type ParseMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []*UserShort `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *ParseMediaResponse) Reset() {
	*x = ParseMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseMediaResponse) ProtoMessage() {}

func (x *ParseMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseMediaResponse.ProtoReflect.Descriptor instead.
func (*ParseMediaResponse) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{11}
}

func (x *ParseMediaResponse) GetTargets() []*UserShort {
	if x != nil {
		return x.Targets
	}
	return nil
}

type SimilarBloggersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *SimilarBloggersRequest) Reset() {
	*x = SimilarBloggersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimilarBloggersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimilarBloggersRequest) ProtoMessage() {}

func (x *SimilarBloggersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimilarBloggersRequest.ProtoReflect.Descriptor instead.
func (*SimilarBloggersRequest) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{12}
}

func (x *SimilarBloggersRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type SimilarBloggersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialBlogger  *FullUser    `protobuf:"bytes,1,opt,name=initial_blogger,json=initialBlogger,proto3" json:"initial_blogger,omitempty"`
	SimilarBloggers []*UserShort `protobuf:"bytes,2,rep,name=similar_bloggers,json=similarBloggers,proto3" json:"similar_bloggers,omitempty"`
}

func (x *SimilarBloggersResponse) Reset() {
	*x = SimilarBloggersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimilarBloggersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimilarBloggersResponse) ProtoMessage() {}

func (x *SimilarBloggersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimilarBloggersResponse.ProtoReflect.Descriptor instead.
func (*SimilarBloggersResponse) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{13}
}

func (x *SimilarBloggersResponse) GetInitialBlogger() *FullUser {
	if x != nil {
		return x.InitialBlogger
	}
	return nil
}

func (x *SimilarBloggersResponse) GetSimilarBloggers() []*UserShort {
	if x != nil {
		return x.SimilarBloggers
	}
	return nil
}

type SaveBotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bots []*Bot `protobuf:"bytes,1,rep,name=bots,proto3" json:"bots,omitempty"`
}

func (x *SaveBotsRequest) Reset() {
	*x = SaveBotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveBotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveBotsRequest) ProtoMessage() {}

func (x *SaveBotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveBotsRequest.ProtoReflect.Descriptor instead.
func (*SaveBotsRequest) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{14}
}

func (x *SaveBotsRequest) GetBots() []*Bot {
	if x != nil {
		return x.Bots
	}
	return nil
}

type UserShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk                         uint64 `protobuf:"varint,1,opt,name=pk,proto3" json:"pk,omitempty"`
	Username                   string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	FullName                   string `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	IsPrivate                  bool   `protobuf:"varint,4,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	PkId                       string `protobuf:"bytes,5,opt,name=pk_id,json=pkId,proto3" json:"pk_id,omitempty"`
	ProfilePicUrl              string `protobuf:"bytes,6,opt,name=profile_pic_url,json=profilePicUrl,proto3" json:"profile_pic_url,omitempty"`
	IsVerified                 bool   `protobuf:"varint,7,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	HasAnonymousProfilePicture bool   `protobuf:"varint,8,opt,name=has_anonymous_profile_picture,json=hasAnonymousProfilePicture,proto3" json:"has_anonymous_profile_picture,omitempty"`
	IsUnpublished              bool   `protobuf:"varint,9,opt,name=is_unpublished,json=isUnpublished,proto3" json:"is_unpublished,omitempty"`
	IsFavorite                 bool   `protobuf:"varint,10,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"`
	HasHighlightReels          bool   `protobuf:"varint,11,opt,name=has_highlight_reels,json=hasHighlightReels,proto3" json:"has_highlight_reels,omitempty"`
}

func (x *UserShort) Reset() {
	*x = UserShort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserShort) ProtoMessage() {}

func (x *UserShort) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserShort.ProtoReflect.Descriptor instead.
func (*UserShort) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{15}
}

func (x *UserShort) GetPk() uint64 {
	if x != nil {
		return x.Pk
	}
	return 0
}

func (x *UserShort) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserShort) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserShort) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *UserShort) GetPkId() string {
	if x != nil {
		return x.PkId
	}
	return ""
}

func (x *UserShort) GetProfilePicUrl() string {
	if x != nil {
		return x.ProfilePicUrl
	}
	return ""
}

func (x *UserShort) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *UserShort) GetHasAnonymousProfilePicture() bool {
	if x != nil {
		return x.HasAnonymousProfilePicture
	}
	return false
}

func (x *UserShort) GetIsUnpublished() bool {
	if x != nil {
		return x.IsUnpublished
	}
	return false
}

func (x *UserShort) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *UserShort) GetHasHighlightReels() bool {
	if x != nil {
		return x.HasHighlightReels
	}
	return false
}

type UserSuperShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk            uint64 `protobuf:"varint,1,opt,name=pk,proto3" json:"pk,omitempty"`
	Username      string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	FullName      string `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	IsPrivate     bool   `protobuf:"varint,4,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	PkId          string `protobuf:"bytes,5,opt,name=pk_id,json=pkId,proto3" json:"pk_id,omitempty"`
	ProfilePicUrl string `protobuf:"bytes,6,opt,name=profile_pic_url,json=profilePicUrl,proto3" json:"profile_pic_url,omitempty"`
	IsVerified    bool   `protobuf:"varint,7,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
}

func (x *UserSuperShort) Reset() {
	*x = UserSuperShort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSuperShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSuperShort) ProtoMessage() {}

func (x *UserSuperShort) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSuperShort.ProtoReflect.Descriptor instead.
func (*UserSuperShort) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{16}
}

func (x *UserSuperShort) GetPk() uint64 {
	if x != nil {
		return x.Pk
	}
	return 0
}

func (x *UserSuperShort) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserSuperShort) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserSuperShort) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *UserSuperShort) GetPkId() string {
	if x != nil {
		return x.PkId
	}
	return ""
}

func (x *UserSuperShort) GetProfilePicUrl() string {
	if x != nil {
		return x.ProfilePicUrl
	}
	return ""
}

func (x *UserSuperShort) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

type Caption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk                 uint64          `protobuf:"varint,1,opt,name=pk,proto3" json:"pk,omitempty"`
	UserId             uint32          `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Text               string          `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Type               uint32          `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	CreatedAt          uint32          `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedAtUtc       uint32          `protobuf:"varint,6,opt,name=created_at_utc,json=createdAtUtc,proto3" json:"created_at_utc,omitempty"`
	ContentType        string          `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Status             string          `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	BitFlags           uint32          `protobuf:"varint,9,opt,name=bit_flags,json=bitFlags,proto3" json:"bit_flags,omitempty"`
	DidReportAsSpam    bool            `protobuf:"varint,10,opt,name=did_report_as_spam,json=didReportAsSpam,proto3" json:"did_report_as_spam,omitempty"`
	ShareEnabled       bool            `protobuf:"varint,11,opt,name=share_enabled,json=shareEnabled,proto3" json:"share_enabled,omitempty"`
	User               *UserSuperShort `protobuf:"bytes,12,opt,name=user,proto3" json:"user,omitempty"`
	IsCovered          bool            `protobuf:"varint,13,opt,name=is_covered,json=isCovered,proto3" json:"is_covered,omitempty"`
	IsRankedComment    bool            `protobuf:"varint,14,opt,name=is_ranked_comment,json=isRankedComment,proto3" json:"is_ranked_comment,omitempty"`
	MediaId            uint64          `protobuf:"varint,15,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	PrivateReplyStatus uint32          `protobuf:"varint,16,opt,name=private_reply_status,json=privateReplyStatus,proto3" json:"private_reply_status,omitempty"`
}

func (x *Caption) Reset() {
	*x = Caption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Caption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Caption) ProtoMessage() {}

func (x *Caption) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Caption.ProtoReflect.Descriptor instead.
func (*Caption) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{17}
}

func (x *Caption) GetPk() uint64 {
	if x != nil {
		return x.Pk
	}
	return 0
}

func (x *Caption) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Caption) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Caption) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Caption) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Caption) GetCreatedAtUtc() uint32 {
	if x != nil {
		return x.CreatedAtUtc
	}
	return 0
}

func (x *Caption) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Caption) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Caption) GetBitFlags() uint32 {
	if x != nil {
		return x.BitFlags
	}
	return 0
}

func (x *Caption) GetDidReportAsSpam() bool {
	if x != nil {
		return x.DidReportAsSpam
	}
	return false
}

func (x *Caption) GetShareEnabled() bool {
	if x != nil {
		return x.ShareEnabled
	}
	return false
}

func (x *Caption) GetUser() *UserSuperShort {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Caption) GetIsCovered() bool {
	if x != nil {
		return x.IsCovered
	}
	return false
}

func (x *Caption) GetIsRankedComment() bool {
	if x != nil {
		return x.IsRankedComment
	}
	return false
}

func (x *Caption) GetMediaId() uint64 {
	if x != nil {
		return x.MediaId
	}
	return 0
}

func (x *Caption) GetPrivateReplyStatus() uint32 {
	if x != nil {
		return x.PrivateReplyStatus
	}
	return 0
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakenAt                             uint32     `protobuf:"varint,1,opt,name=taken_at,json=takenAt,proto3" json:"taken_at,omitempty"`
	Pk                                  int64      `protobuf:"varint,2,opt,name=pk,proto3" json:"pk,omitempty"`
	Id                                  string     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	DeviceTimestamp                     uint64     `protobuf:"varint,4,opt,name=device_timestamp,json=deviceTimestamp,proto3" json:"device_timestamp,omitempty"`
	MediaType                           uint32     `protobuf:"varint,5,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	Code                                string     `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	ClientCacheKey                      string     `protobuf:"bytes,7,opt,name=client_cache_key,json=clientCacheKey,proto3" json:"client_cache_key,omitempty"`
	FilterType                          uint32     `protobuf:"varint,8,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`
	IsUnifiedVideo                      bool       `protobuf:"varint,9,opt,name=is_unified_video,json=isUnifiedVideo,proto3" json:"is_unified_video,omitempty"`
	ShouldRequestAds                    bool       `protobuf:"varint,10,opt,name=should_request_ads,json=shouldRequestAds,proto3" json:"should_request_ads,omitempty"`
	OriginalMediaHasVisualReplyMedia    bool       `protobuf:"varint,11,opt,name=original_media_has_visual_reply_media,json=originalMediaHasVisualReplyMedia,proto3" json:"original_media_has_visual_reply_media,omitempty"`
	CaptionIsEdited                     bool       `protobuf:"varint,12,opt,name=caption_is_edited,json=captionIsEdited,proto3" json:"caption_is_edited,omitempty"`
	LikeAndViewCountsDisabled           bool       `protobuf:"varint,13,opt,name=like_and_view_counts_disabled,json=likeAndViewCountsDisabled,proto3" json:"like_and_view_counts_disabled,omitempty"`
	CommercialityStatus                 string     `protobuf:"bytes,14,opt,name=commerciality_status,json=commercialityStatus,proto3" json:"commerciality_status,omitempty"`
	IsPaidPartnership                   bool       `protobuf:"varint,15,opt,name=is_paid_partnership,json=isPaidPartnership,proto3" json:"is_paid_partnership,omitempty"`
	IsVisualReplyCommenterNoticeEnabled bool       `protobuf:"varint,16,opt,name=is_visual_reply_commenter_notice_enabled,json=isVisualReplyCommenterNoticeEnabled,proto3" json:"is_visual_reply_commenter_notice_enabled,omitempty"`
	HasDelayedMetadata                  bool       `protobuf:"varint,18,opt,name=has_delayed_metadata,json=hasDelayedMetadata,proto3" json:"has_delayed_metadata,omitempty"`
	CommentLikesEnabled                 bool       `protobuf:"varint,20,opt,name=comment_likes_enabled,json=commentLikesEnabled,proto3" json:"comment_likes_enabled,omitempty"`
	CommentThreadingEnabled             bool       `protobuf:"varint,21,opt,name=comment_threading_enabled,json=commentThreadingEnabled,proto3" json:"comment_threading_enabled,omitempty"`
	MaxNumVisiblePreviewComments        uint32     `protobuf:"varint,22,opt,name=max_num_visible_preview_comments,json=maxNumVisiblePreviewComments,proto3" json:"max_num_visible_preview_comments,omitempty"`
	HasMoreComments                     bool       `protobuf:"varint,23,opt,name=has_more_comments,json=hasMoreComments,proto3" json:"has_more_comments,omitempty"`
	CanViewMorePreviewComments          bool       `protobuf:"varint,24,opt,name=can_view_more_preview_comments,json=canViewMorePreviewComments,proto3" json:"can_view_more_preview_comments,omitempty"`
	HideViewAllCommentEntrypoint        bool       `protobuf:"varint,25,opt,name=hide_view_all_comment_entrypoint,json=hideViewAllCommentEntrypoint,proto3" json:"hide_view_all_comment_entrypoint,omitempty"`
	InlineComposerDisplayCondition      string     `protobuf:"bytes,26,opt,name=inline_composer_display_condition,json=inlineComposerDisplayCondition,proto3" json:"inline_composer_display_condition,omitempty"`
	InlineComposerImpTriggerTime        uint32     `protobuf:"varint,27,opt,name=inline_composer_imp_trigger_time,json=inlineComposerImpTriggerTime,proto3" json:"inline_composer_imp_trigger_time,omitempty"`
	PhotoOfYou                          bool       `protobuf:"varint,28,opt,name=photo_of_you,json=photoOfYou,proto3" json:"photo_of_you,omitempty"`
	IsOrganicProductTaggingEligible     bool       `protobuf:"varint,29,opt,name=is_organic_product_tagging_eligible,json=isOrganicProductTaggingEligible,proto3" json:"is_organic_product_tagging_eligible,omitempty"`
	CanSeeInsightsAsBrand               bool       `protobuf:"varint,30,opt,name=can_see_insights_as_brand,json=canSeeInsightsAsBrand,proto3" json:"can_see_insights_as_brand,omitempty"`
	User                                *UserShort `protobuf:"bytes,31,opt,name=user,proto3" json:"user,omitempty"`
	CanViewerReshare                    bool       `protobuf:"varint,32,opt,name=can_viewer_reshare,json=canViewerReshare,proto3" json:"can_viewer_reshare,omitempty"`
	LikeCount                           uint32     `protobuf:"varint,33,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	HasLiked                            bool       `protobuf:"varint,34,opt,name=has_liked,json=hasLiked,proto3" json:"has_liked,omitempty"`
	OriginalWidth                       uint32     `protobuf:"varint,38,opt,name=original_width,json=originalWidth,proto3" json:"original_width,omitempty"`
	OriginalHeight                      uint32     `protobuf:"varint,39,opt,name=original_height,json=originalHeight,proto3" json:"original_height,omitempty"`
	Caption                             *Caption   `protobuf:"bytes,40,opt,name=caption,proto3" json:"caption,omitempty"`
	CanViewerSave                       bool       `protobuf:"varint,43,opt,name=can_viewer_save,json=canViewerSave,proto3" json:"can_viewer_save,omitempty"`
	IsInProfileGrid                     bool       `protobuf:"varint,44,opt,name=is_in_profile_grid,json=isInProfileGrid,proto3" json:"is_in_profile_grid,omitempty"`
	ProfileGridControlEnabled           bool       `protobuf:"varint,45,opt,name=profile_grid_control_enabled,json=profileGridControlEnabled,proto3" json:"profile_grid_control_enabled,omitempty"`
	OrganicTrackingToken                string     `protobuf:"bytes,46,opt,name=organic_tracking_token,json=organicTrackingToken,proto3" json:"organic_tracking_token,omitempty"`
	HasSharedToFb                       uint32     `protobuf:"varint,47,opt,name=has_shared_to_fb,json=hasSharedToFb,proto3" json:"has_shared_to_fb,omitempty"`
	ProductType                         string     `protobuf:"bytes,48,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	DeletedReason                       uint32     `protobuf:"varint,49,opt,name=deleted_reason,json=deletedReason,proto3" json:"deleted_reason,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{18}
}

func (x *Media) GetTakenAt() uint32 {
	if x != nil {
		return x.TakenAt
	}
	return 0
}

func (x *Media) GetPk() int64 {
	if x != nil {
		return x.Pk
	}
	return 0
}

func (x *Media) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Media) GetDeviceTimestamp() uint64 {
	if x != nil {
		return x.DeviceTimestamp
	}
	return 0
}

func (x *Media) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *Media) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Media) GetClientCacheKey() string {
	if x != nil {
		return x.ClientCacheKey
	}
	return ""
}

func (x *Media) GetFilterType() uint32 {
	if x != nil {
		return x.FilterType
	}
	return 0
}

func (x *Media) GetIsUnifiedVideo() bool {
	if x != nil {
		return x.IsUnifiedVideo
	}
	return false
}

func (x *Media) GetShouldRequestAds() bool {
	if x != nil {
		return x.ShouldRequestAds
	}
	return false
}

func (x *Media) GetOriginalMediaHasVisualReplyMedia() bool {
	if x != nil {
		return x.OriginalMediaHasVisualReplyMedia
	}
	return false
}

func (x *Media) GetCaptionIsEdited() bool {
	if x != nil {
		return x.CaptionIsEdited
	}
	return false
}

func (x *Media) GetLikeAndViewCountsDisabled() bool {
	if x != nil {
		return x.LikeAndViewCountsDisabled
	}
	return false
}

func (x *Media) GetCommercialityStatus() string {
	if x != nil {
		return x.CommercialityStatus
	}
	return ""
}

func (x *Media) GetIsPaidPartnership() bool {
	if x != nil {
		return x.IsPaidPartnership
	}
	return false
}

func (x *Media) GetIsVisualReplyCommenterNoticeEnabled() bool {
	if x != nil {
		return x.IsVisualReplyCommenterNoticeEnabled
	}
	return false
}

func (x *Media) GetHasDelayedMetadata() bool {
	if x != nil {
		return x.HasDelayedMetadata
	}
	return false
}

func (x *Media) GetCommentLikesEnabled() bool {
	if x != nil {
		return x.CommentLikesEnabled
	}
	return false
}

func (x *Media) GetCommentThreadingEnabled() bool {
	if x != nil {
		return x.CommentThreadingEnabled
	}
	return false
}

func (x *Media) GetMaxNumVisiblePreviewComments() uint32 {
	if x != nil {
		return x.MaxNumVisiblePreviewComments
	}
	return 0
}

func (x *Media) GetHasMoreComments() bool {
	if x != nil {
		return x.HasMoreComments
	}
	return false
}

func (x *Media) GetCanViewMorePreviewComments() bool {
	if x != nil {
		return x.CanViewMorePreviewComments
	}
	return false
}

func (x *Media) GetHideViewAllCommentEntrypoint() bool {
	if x != nil {
		return x.HideViewAllCommentEntrypoint
	}
	return false
}

func (x *Media) GetInlineComposerDisplayCondition() string {
	if x != nil {
		return x.InlineComposerDisplayCondition
	}
	return ""
}

func (x *Media) GetInlineComposerImpTriggerTime() uint32 {
	if x != nil {
		return x.InlineComposerImpTriggerTime
	}
	return 0
}

func (x *Media) GetPhotoOfYou() bool {
	if x != nil {
		return x.PhotoOfYou
	}
	return false
}

func (x *Media) GetIsOrganicProductTaggingEligible() bool {
	if x != nil {
		return x.IsOrganicProductTaggingEligible
	}
	return false
}

func (x *Media) GetCanSeeInsightsAsBrand() bool {
	if x != nil {
		return x.CanSeeInsightsAsBrand
	}
	return false
}

func (x *Media) GetUser() *UserShort {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Media) GetCanViewerReshare() bool {
	if x != nil {
		return x.CanViewerReshare
	}
	return false
}

func (x *Media) GetLikeCount() uint32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Media) GetHasLiked() bool {
	if x != nil {
		return x.HasLiked
	}
	return false
}

func (x *Media) GetOriginalWidth() uint32 {
	if x != nil {
		return x.OriginalWidth
	}
	return 0
}

func (x *Media) GetOriginalHeight() uint32 {
	if x != nil {
		return x.OriginalHeight
	}
	return 0
}

func (x *Media) GetCaption() *Caption {
	if x != nil {
		return x.Caption
	}
	return nil
}

func (x *Media) GetCanViewerSave() bool {
	if x != nil {
		return x.CanViewerSave
	}
	return false
}

func (x *Media) GetIsInProfileGrid() bool {
	if x != nil {
		return x.IsInProfileGrid
	}
	return false
}

func (x *Media) GetProfileGridControlEnabled() bool {
	if x != nil {
		return x.ProfileGridControlEnabled
	}
	return false
}

func (x *Media) GetOrganicTrackingToken() string {
	if x != nil {
		return x.OrganicTrackingToken
	}
	return ""
}

func (x *Media) GetHasSharedToFb() uint32 {
	if x != nil {
		return x.HasSharedToFb
	}
	return 0
}

func (x *Media) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *Media) GetDeletedReason() uint32 {
	if x != nil {
		return x.DeletedReason
	}
	return 0
}

type Bot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// номер аккаунта в инстаграме
	Pk int64 `protobuf:"varint,1,opt,name=pk,proto3" json:"pk,omitempty"`
	// имя аккаунта в инстаграме
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// количество блогеров, которые проходят проверку по коду региона
	SessionId string `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// прокси для бота
	Proxy    *Proxy       `protobuf:"bytes,5,opt,name=proxy,proto3" json:"proxy,omitempty"`
	Settings *BotSettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *Bot) Reset() {
	*x = Bot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bot) ProtoMessage() {}

func (x *Bot) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bot.ProtoReflect.Descriptor instead.
func (*Bot) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{19}
}

func (x *Bot) GetPk() int64 {
	if x != nil {
		return x.Pk
	}
	return 0
}

func (x *Bot) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Bot) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Bot) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Bot) GetProxy() *Proxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *Bot) GetSettings() *BotSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type BotSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAgent string                      `protobuf:"bytes,1,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Bearer    string                      `protobuf:"bytes,2,opt,name=bearer,proto3" json:"bearer,omitempty"`
	Headers   *BotSettings_Headers        `protobuf:"bytes,3,opt,name=headers,proto3" json:"headers,omitempty"`
	Device    *BotSettings_DeviceSettings `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *BotSettings) Reset() {
	*x = BotSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotSettings) ProtoMessage() {}

func (x *BotSettings) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotSettings.ProtoReflect.Descriptor instead.
func (*BotSettings) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{20}
}

func (x *BotSettings) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *BotSettings) GetBearer() string {
	if x != nil {
		return x.Bearer
	}
	return ""
}

func (x *BotSettings) GetHeaders() *BotSettings_Headers {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *BotSettings) GetDevice() *BotSettings_DeviceSettings {
	if x != nil {
		return x.Device
	}
	return nil
}

type Proxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host  string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port  int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Login string `protobuf:"bytes,3,opt,name=login,proto3" json:"login,omitempty"`
	Pass  string `protobuf:"bytes,4,opt,name=pass,proto3" json:"pass,omitempty"`
}

func (x *Proxy) Reset() {
	*x = Proxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy) ProtoMessage() {}

func (x *Proxy) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy.ProtoReflect.Descriptor instead.
func (*Proxy) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{21}
}

func (x *Proxy) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Proxy) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Proxy) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *Proxy) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

type SaveBotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotsSaved int32    `protobuf:"varint,1,opt,name=bots_saved,json=botsSaved,proto3" json:"bots_saved,omitempty"`
	Usernames []string `protobuf:"bytes,2,rep,name=usernames,proto3" json:"usernames,omitempty"`
}

func (x *SaveBotsResponse) Reset() {
	*x = SaveBotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveBotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveBotsResponse) ProtoMessage() {}

func (x *SaveBotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveBotsResponse.ProtoReflect.Descriptor instead.
func (*SaveBotsResponse) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{22}
}

func (x *SaveBotsResponse) GetBotsSaved() int32 {
	if x != nil {
		return x.BotsSaved
	}
	return 0
}

func (x *SaveBotsResponse) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

type FullUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk                         int64                `protobuf:"varint,1,opt,name=pk,proto3" json:"pk,omitempty"`
	Username                   string               `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	FullName                   string               `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	IsPrivate                  bool                 `protobuf:"varint,4,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	PkId                       string               `protobuf:"bytes,5,opt,name=pk_id,json=pkId,proto3" json:"pk_id,omitempty"`
	ProfilePicUrl              string               `protobuf:"bytes,6,opt,name=profile_pic_url,json=profilePicUrl,proto3" json:"profile_pic_url,omitempty"`
	ProfilePicId               string               `protobuf:"bytes,7,opt,name=profile_pic_id,json=profilePicId,proto3" json:"profile_pic_id,omitempty"`
	IsVerified                 bool                 `protobuf:"varint,8,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	HasAnonymousProfilePicture bool                 `protobuf:"varint,9,opt,name=has_anonymous_profile_picture,json=hasAnonymousProfilePicture,proto3" json:"has_anonymous_profile_picture,omitempty"`
	MediaCount                 uint32               `protobuf:"varint,10,opt,name=media_count,json=mediaCount,proto3" json:"media_count,omitempty"`
	FollowerCount              uint32               `protobuf:"varint,11,opt,name=follower_count,json=followerCount,proto3" json:"follower_count,omitempty"`
	FollowingCount             uint32               `protobuf:"varint,12,opt,name=following_count,json=followingCount,proto3" json:"following_count,omitempty"`
	Biography                  string               `protobuf:"bytes,16,opt,name=biography,proto3" json:"biography,omitempty"`
	ExternalUrl                string               `protobuf:"bytes,17,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`
	ExternalLynxUrl            string               `protobuf:"bytes,18,opt,name=external_lynx_url,json=externalLynxUrl,proto3" json:"external_lynx_url,omitempty"`
	TotalIgtvVideos            uint32               `protobuf:"varint,22,opt,name=total_igtv_videos,json=totalIgtvVideos,proto3" json:"total_igtv_videos,omitempty"`
	UsertagsCount              uint32               `protobuf:"varint,26,opt,name=usertags_count,json=usertagsCount,proto3" json:"usertags_count,omitempty"`
	IsInterestAccount          bool                 `protobuf:"varint,33,opt,name=is_interest_account,json=isInterestAccount,proto3" json:"is_interest_account,omitempty"`
	HasChaining                bool                 `protobuf:"varint,34,opt,name=has_chaining,json=hasChaining,proto3" json:"has_chaining,omitempty"`
	MutualFollowersCount       uint32               `protobuf:"varint,35,opt,name=mutual_followers_count,json=mutualFollowersCount,proto3" json:"mutual_followers_count,omitempty"`
	ProfileContext             string               `protobuf:"bytes,36,opt,name=profile_context,json=profileContext,proto3" json:"profile_context,omitempty"`
	IsBusiness                 bool                 `protobuf:"varint,41,opt,name=is_business,json=isBusiness,proto3" json:"is_business,omitempty"`
	AccountType                uint32               `protobuf:"varint,43,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	BioLinks                   []*FullUser_BioLinks `protobuf:"bytes,47,rep,name=bio_links,json=bioLinks,proto3" json:"bio_links,omitempty"`
}

func (x *FullUser) Reset() {
	*x = FullUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullUser) ProtoMessage() {}

func (x *FullUser) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullUser.ProtoReflect.Descriptor instead.
func (*FullUser) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{23}
}

func (x *FullUser) GetPk() int64 {
	if x != nil {
		return x.Pk
	}
	return 0
}

func (x *FullUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FullUser) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *FullUser) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *FullUser) GetPkId() string {
	if x != nil {
		return x.PkId
	}
	return ""
}

func (x *FullUser) GetProfilePicUrl() string {
	if x != nil {
		return x.ProfilePicUrl
	}
	return ""
}

func (x *FullUser) GetProfilePicId() string {
	if x != nil {
		return x.ProfilePicId
	}
	return ""
}

func (x *FullUser) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *FullUser) GetHasAnonymousProfilePicture() bool {
	if x != nil {
		return x.HasAnonymousProfilePicture
	}
	return false
}

func (x *FullUser) GetMediaCount() uint32 {
	if x != nil {
		return x.MediaCount
	}
	return 0
}

func (x *FullUser) GetFollowerCount() uint32 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *FullUser) GetFollowingCount() uint32 {
	if x != nil {
		return x.FollowingCount
	}
	return 0
}

func (x *FullUser) GetBiography() string {
	if x != nil {
		return x.Biography
	}
	return ""
}

func (x *FullUser) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *FullUser) GetExternalLynxUrl() string {
	if x != nil {
		return x.ExternalLynxUrl
	}
	return ""
}

func (x *FullUser) GetTotalIgtvVideos() uint32 {
	if x != nil {
		return x.TotalIgtvVideos
	}
	return 0
}

func (x *FullUser) GetUsertagsCount() uint32 {
	if x != nil {
		return x.UsertagsCount
	}
	return 0
}

func (x *FullUser) GetIsInterestAccount() bool {
	if x != nil {
		return x.IsInterestAccount
	}
	return false
}

func (x *FullUser) GetHasChaining() bool {
	if x != nil {
		return x.HasChaining
	}
	return false
}

func (x *FullUser) GetMutualFollowersCount() uint32 {
	if x != nil {
		return x.MutualFollowersCount
	}
	return 0
}

func (x *FullUser) GetProfileContext() string {
	if x != nil {
		return x.ProfileContext
	}
	return ""
}

func (x *FullUser) GetIsBusiness() bool {
	if x != nil {
		return x.IsBusiness
	}
	return false
}

func (x *FullUser) GetAccountType() uint32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *FullUser) GetBioLinks() []*FullUser_BioLinks {
	if x != nil {
		return x.BioLinks
	}
	return nil
}

type BotSettings_DeviceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppVersion     string `protobuf:"bytes,1,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	AndroidVersion int32  `protobuf:"varint,2,opt,name=android_version,json=androidVersion,proto3" json:"android_version,omitempty"`
	AndroidRelease string `protobuf:"bytes,3,opt,name=android_release,json=androidRelease,proto3" json:"android_release,omitempty"`
	Dpi            string `protobuf:"bytes,4,opt,name=dpi,proto3" json:"dpi,omitempty"`
	Resolution     string `protobuf:"bytes,5,opt,name=resolution,proto3" json:"resolution,omitempty"`
	Manufacturer   string `protobuf:"bytes,6,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Device         string `protobuf:"bytes,7,opt,name=device,proto3" json:"device,omitempty"`
	Model          string `protobuf:"bytes,8,opt,name=model,proto3" json:"model,omitempty"`
	Cpu            string `protobuf:"bytes,9,opt,name=cpu,proto3" json:"cpu,omitempty"`
	VersionCode    string `protobuf:"bytes,10,opt,name=version_code,json=versionCode,proto3" json:"version_code,omitempty"`
}

func (x *BotSettings_DeviceSettings) Reset() {
	*x = BotSettings_DeviceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotSettings_DeviceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotSettings_DeviceSettings) ProtoMessage() {}

func (x *BotSettings_DeviceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotSettings_DeviceSettings.ProtoReflect.Descriptor instead.
func (*BotSettings_DeviceSettings) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{20, 0}
}

func (x *BotSettings_DeviceSettings) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *BotSettings_DeviceSettings) GetAndroidVersion() int32 {
	if x != nil {
		return x.AndroidVersion
	}
	return 0
}

func (x *BotSettings_DeviceSettings) GetAndroidRelease() string {
	if x != nil {
		return x.AndroidRelease
	}
	return ""
}

func (x *BotSettings_DeviceSettings) GetDpi() string {
	if x != nil {
		return x.Dpi
	}
	return ""
}

func (x *BotSettings_DeviceSettings) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *BotSettings_DeviceSettings) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *BotSettings_DeviceSettings) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *BotSettings_DeviceSettings) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *BotSettings_DeviceSettings) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *BotSettings_DeviceSettings) GetVersionCode() string {
	if x != nil {
		return x.VersionCode
	}
	return ""
}

type BotSettings_Headers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rur            string `protobuf:"bytes,1,opt,name=rur,proto3" json:"rur,omitempty"`
	Shbid          string `protobuf:"bytes,2,opt,name=shbid,proto3" json:"shbid,omitempty"`
	Shbts          string `protobuf:"bytes,3,opt,name=shbts,proto3" json:"shbts,omitempty"`
	Xmid           string `protobuf:"bytes,4,opt,name=xmid,proto3" json:"xmid,omitempty"`
	AndroidId      string `protobuf:"bytes,5,opt,name=android_id,json=androidId,proto3" json:"android_id,omitempty"`
	DeviceId       string `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	PhoneId        string `protobuf:"bytes,7,opt,name=phone_id,json=phoneId,proto3" json:"phone_id,omitempty"`
	AdvertisingId  string `protobuf:"bytes,8,opt,name=advertising_id,json=advertisingId,proto3" json:"advertising_id,omitempty"`
	FamilyDeviceId string `protobuf:"bytes,9,opt,name=family_device_id,json=familyDeviceId,proto3" json:"family_device_id,omitempty"`
}

func (x *BotSettings_Headers) Reset() {
	*x = BotSettings_Headers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotSettings_Headers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotSettings_Headers) ProtoMessage() {}

func (x *BotSettings_Headers) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotSettings_Headers.ProtoReflect.Descriptor instead.
func (*BotSettings_Headers) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{20, 1}
}

func (x *BotSettings_Headers) GetRur() string {
	if x != nil {
		return x.Rur
	}
	return ""
}

func (x *BotSettings_Headers) GetShbid() string {
	if x != nil {
		return x.Shbid
	}
	return ""
}

func (x *BotSettings_Headers) GetShbts() string {
	if x != nil {
		return x.Shbts
	}
	return ""
}

func (x *BotSettings_Headers) GetXmid() string {
	if x != nil {
		return x.Xmid
	}
	return ""
}

func (x *BotSettings_Headers) GetAndroidId() string {
	if x != nil {
		return x.AndroidId
	}
	return ""
}

func (x *BotSettings_Headers) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *BotSettings_Headers) GetPhoneId() string {
	if x != nil {
		return x.PhoneId
	}
	return ""
}

func (x *BotSettings_Headers) GetAdvertisingId() string {
	if x != nil {
		return x.AdvertisingId
	}
	return ""
}

func (x *BotSettings_Headers) GetFamilyDeviceId() string {
	if x != nil {
		return x.FamilyDeviceId
	}
	return ""
}

type FullUser_BioLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId                          uint64 `protobuf:"varint,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	Url                             string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	LynxUrl                         string `protobuf:"bytes,3,opt,name=lynx_url,json=lynxUrl,proto3" json:"lynx_url,omitempty"`
	LinkType                        string `protobuf:"bytes,4,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	Title                           string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	GroupId                         uint32 `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OpenExternalUrlWithInAppBrowser bool   `protobuf:"varint,7,opt,name=open_external_url_with_in_app_browser,json=openExternalUrlWithInAppBrowser,proto3" json:"open_external_url_with_in_app_browser,omitempty"`
}

func (x *FullUser_BioLinks) Reset() {
	*x = FullUser_BioLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instaproxy_instaproxy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullUser_BioLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullUser_BioLinks) ProtoMessage() {}

func (x *FullUser_BioLinks) ProtoReflect() protoreflect.Message {
	mi := &file_instaproxy_instaproxy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullUser_BioLinks.ProtoReflect.Descriptor instead.
func (*FullUser_BioLinks) Descriptor() ([]byte, []int) {
	return file_instaproxy_instaproxy_proto_rawDescGZIP(), []int{23, 0}
}

func (x *FullUser_BioLinks) GetLinkId() uint64 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

func (x *FullUser_BioLinks) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FullUser_BioLinks) GetLynxUrl() string {
	if x != nil {
		return x.LynxUrl
	}
	return ""
}

func (x *FullUser_BioLinks) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *FullUser_BioLinks) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FullUser_BioLinks) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *FullUser_BioLinks) GetOpenExternalUrlWithInAppBrowser() bool {
	if x != nil {
		return x.OpenExternalUrlWithInAppBrowser
	}
	return false
}

var File_instaproxy_instaproxy_proto protoreflect.FileDescriptor

var file_instaproxy_instaproxy_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x62, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x49, 0x0a, 0x12, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x13,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x01, 0x0a,
	0x12, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x63, 0x68, 0x65,
	0x61, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x22, 0x4b, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x50,
	0x6b, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x22, 0x76, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x12, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x16, 0x53, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x01,
	0x0a, 0x17, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x52, 0x0f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x42, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x22, 0x2b, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x42, 0x6f, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x74,
	0x73, 0x22, 0x8c, 0x03, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x70, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69,
	0x63, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68, 0x61,
	0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x75,
	0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x72, 0x65, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68,
	0x61, 0x73, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x65, 0x6c, 0x73,
	0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x70, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x70,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6b, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x86, 0x04, 0x0a, 0x07, 0x43, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x74, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x61, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x64, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x53, 0x70, 0x61, 0x6d,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd8, 0x0f, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x25, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x61, 0x73, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x45,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6c, 0x69,
	0x6b, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x50, 0x61, 0x69, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x55, 0x0a, 0x28, 0x69, 0x73,
	0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x69, 0x73,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x68, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x6b, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d,
	0x61, 0x78, 0x4e, 0x75, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68,
	0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x63, 0x61, 0x6e, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x63, 0x61, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x68, 0x69, 0x64, 0x65, 0x56, 0x69, 0x65, 0x77, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x20, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x70, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f,
	0x6f, 0x66, 0x5f, 0x79, 0x6f, 0x75, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x4f, 0x66, 0x59, 0x6f, 0x75, 0x12, 0x4c, 0x0a, 0x23, 0x69, 0x73, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x69, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x61,
	0x6e, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47,
	0x72, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67,
	0x72, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x68, 0x61,
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x62, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54,
	0x6f, 0x46, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb4, 0x01,
	0x0a, 0x03, 0x42, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42,
	0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xee, 0x05, 0x0a, 0x0b, 0x42, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x42,
	0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x42, 0x6f,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0xbc, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x70, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x70, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x21, 0x0a, 0x0c,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x1a,
	0x83, 0x02, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x75, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x68, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68,
	0x62, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x62, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x62, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x6d, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x78, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73,
	0x22, 0x4f, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x42, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x73, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x84, 0x09, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63,
	0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x68, 0x61,
	0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x68, 0x61, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12,
	0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x79, 0x6e, 0x78,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x79, 0x6e, 0x78, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x67, 0x74, 0x76, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x67, 0x74,
	0x76, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x74,
	0x61, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x74, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x2e, 0x42, 0x69, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x08, 0x62, 0x69,
	0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0xef, 0x01, 0x0a, 0x09, 0x42, 0x69, 0x6f, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x79, 0x6e, 0x78, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x79, 0x6e, 0x78, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x25, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x6f, 0x70, 0x65, 0x6e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x41, 0x70,
	0x70, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x32, 0xef, 0x03, 0x0a, 0x0a, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2f, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x42,
	0x6f, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x6f, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64,
	0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12,
	0x17, 0x2e, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x53, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x12, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x18, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x13, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x13, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_instaproxy_instaproxy_proto_rawDescOnce sync.Once
	file_instaproxy_instaproxy_proto_rawDescData = file_instaproxy_instaproxy_proto_rawDesc
)

func file_instaproxy_instaproxy_proto_rawDescGZIP() []byte {
	file_instaproxy_instaproxy_proto_rawDescOnce.Do(func() {
		file_instaproxy_instaproxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_instaproxy_instaproxy_proto_rawDescData)
	})
	return file_instaproxy_instaproxy_proto_rawDescData
}

var file_instaproxy_instaproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_instaproxy_instaproxy_proto_goTypes = []interface{}{
	(*OpenProfileRequest)(nil),         // 0: OpenProfileRequest
	(*OpenProfileResponse)(nil),        // 1: OpenProfileResponse
	(*FollowUsersRequest)(nil),         // 2: FollowUsersRequest
	(*FollowUsersResponse)(nil),        // 3: FollowUsersResponse
	(*PostPictureRequest)(nil),         // 4: PostPictureRequest
	(*PostPictureResponse)(nil),        // 5: PostPictureResponse
	(*UpdatePostRequest)(nil),          // 6: UpdatePostRequest
	(*UpdatePostResponse)(nil),         // 7: UpdatePostResponse
	(*GetBloggerMediasRequest)(nil),    // 8: GetBloggerMediasRequest
	(*GetBloggerMediasResponse)(nil),   // 9: GetBloggerMediasResponse
	(*ParseMediaRequest)(nil),          // 10: ParseMediaRequest
	(*ParseMediaResponse)(nil),         // 11: ParseMediaResponse
	(*SimilarBloggersRequest)(nil),     // 12: SimilarBloggersRequest
	(*SimilarBloggersResponse)(nil),    // 13: SimilarBloggersResponse
	(*SaveBotsRequest)(nil),            // 14: SaveBotsRequest
	(*UserShort)(nil),                  // 15: UserShort
	(*UserSuperShort)(nil),             // 16: UserSuperShort
	(*Caption)(nil),                    // 17: Caption
	(*Media)(nil),                      // 18: Media
	(*Bot)(nil),                        // 19: Bot
	(*BotSettings)(nil),                // 20: BotSettings
	(*Proxy)(nil),                      // 21: Proxy
	(*SaveBotsResponse)(nil),           // 22: SaveBotsResponse
	(*FullUser)(nil),                   // 23: FullUser
	(*BotSettings_DeviceSettings)(nil), // 24: BotSettings.DeviceSettings
	(*BotSettings_Headers)(nil),        // 25: BotSettings.Headers
	(*FullUser_BioLinks)(nil),          // 26: FullUser.Bio_links
}
var file_instaproxy_instaproxy_proto_depIdxs = []int32{
	18, // 0: OpenProfileResponse.medias:type_name -> Media
	16, // 1: OpenProfileResponse.user:type_name -> UserSuperShort
	21, // 2: PostPictureRequest.cheap_proxy:type_name -> Proxy
	18, // 3: GetBloggerMediasResponse.medias:type_name -> Media
	15, // 4: ParseMediaResponse.targets:type_name -> UserShort
	23, // 5: SimilarBloggersResponse.initial_blogger:type_name -> FullUser
	15, // 6: SimilarBloggersResponse.similar_bloggers:type_name -> UserShort
	19, // 7: SaveBotsRequest.bots:type_name -> Bot
	16, // 8: Caption.user:type_name -> UserSuperShort
	15, // 9: Media.user:type_name -> UserShort
	17, // 10: Media.caption:type_name -> Caption
	21, // 11: Bot.proxy:type_name -> Proxy
	20, // 12: Bot.settings:type_name -> BotSettings
	25, // 13: BotSettings.headers:type_name -> BotSettings.Headers
	24, // 14: BotSettings.device:type_name -> BotSettings.DeviceSettings
	26, // 15: FullUser.bio_links:type_name -> FullUser.Bio_links
	14, // 16: InstaProxy.SaveBots:input_type -> SaveBotsRequest
	12, // 17: InstaProxy.FindSimilarBloggers:input_type -> SimilarBloggersRequest
	10, // 18: InstaProxy.ParseMedia:input_type -> ParseMediaRequest
	8,  // 19: InstaProxy.GetBloggerMedias:input_type -> GetBloggerMediasRequest
	4,  // 20: InstaProxy.PostPicture:input_type -> PostPictureRequest
	6,  // 21: InstaProxy.UpdatePicture:input_type -> UpdatePostRequest
	0,  // 22: InstaProxy.OpenProfile:input_type -> OpenProfileRequest
	2,  // 23: InstaProxy.FollowUsers:input_type -> FollowUsersRequest
	22, // 24: InstaProxy.SaveBots:output_type -> SaveBotsResponse
	13, // 25: InstaProxy.FindSimilarBloggers:output_type -> SimilarBloggersResponse
	11, // 26: InstaProxy.ParseMedia:output_type -> ParseMediaResponse
	9,  // 27: InstaProxy.GetBloggerMedias:output_type -> GetBloggerMediasResponse
	5,  // 28: InstaProxy.PostPicture:output_type -> PostPictureResponse
	7,  // 29: InstaProxy.UpdatePicture:output_type -> UpdatePostResponse
	1,  // 30: InstaProxy.OpenProfile:output_type -> OpenProfileResponse
	3,  // 31: InstaProxy.FollowUsers:output_type -> FollowUsersResponse
	24, // [24:32] is the sub-list for method output_type
	16, // [16:24] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_instaproxy_instaproxy_proto_init() }
func file_instaproxy_instaproxy_proto_init() {
	if File_instaproxy_instaproxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_instaproxy_instaproxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPictureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPictureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBloggerMediasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBloggerMediasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimilarBloggersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimilarBloggersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveBotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserShort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSuperShort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Caption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveBotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotSettings_DeviceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotSettings_Headers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instaproxy_instaproxy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullUser_BioLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_instaproxy_instaproxy_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instaproxy_instaproxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_instaproxy_instaproxy_proto_goTypes,
		DependencyIndexes: file_instaproxy_instaproxy_proto_depIdxs,
		MessageInfos:      file_instaproxy_instaproxy_proto_msgTypes,
	}.Build()
	File_instaproxy_instaproxy_proto = out.File
	file_instaproxy_instaproxy_proto_rawDesc = nil
	file_instaproxy_instaproxy_proto_goTypes = nil
	file_instaproxy_instaproxy_proto_depIdxs = nil
}
